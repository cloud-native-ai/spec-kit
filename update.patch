diff --git a/.github/prompts/speckit.analyze.prompt.md b/.github/prompts/speckit.analyze.prompt.md
index 8e510de..6b547e1 100644
--- a/.github/prompts/speckit.analyze.prompt.md
+++ b/.github/prompts/speckit.analyze.prompt.md
@@ -1,7 +1,3 @@
----
-description: Perform a non-destructive cross-artifact consistency and quality analysis across spec.md, plan.md, and tasks.md after task generation.
----
-
 ## User Input
 
 ```text
@@ -181,4 +177,4 @@ Ask the user: "Would you like me to suggest concrete remediation edits for the t
 
 ## Context
 
-$ARGUMENTS
+{ARGS}
\ No newline at end of file
diff --git a/.github/prompts/speckit.checklist.prompt.md b/.github/prompts/speckit.checklist.prompt.md
index 5417f6a..35d63e1 100644
--- a/.github/prompts/speckit.checklist.prompt.md
+++ b/.github/prompts/speckit.checklist.prompt.md
@@ -1,7 +1,3 @@
----
-description: Generate a custom checklist for the current feature based on user requirements.
----
-
 ## Checklist Purpose: "Unit Tests for English"
 
 **CRITICAL CONCEPT**: Checklists are **UNIT TESTS FOR REQUIREMENTS WRITING** - they validate the quality, clarity, and completeness of requirements in a given domain.
@@ -284,4 +280,4 @@ Sample items:
 - Wrong: Verification of behavior
 - Correct: Validation of requirement quality
 - Wrong: "Does it do X?" 
-- Correct: "Is X clearly specified?"
+- Correct: "Is X clearly specified?"
\ No newline at end of file
diff --git a/.github/prompts/speckit.clarify.prompt.md b/.github/prompts/speckit.clarify.prompt.md
index 0f11d41..d300a5f 100644
--- a/.github/prompts/speckit.clarify.prompt.md
+++ b/.github/prompts/speckit.clarify.prompt.md
@@ -1,7 +1,3 @@
----
-description: Identify underspecified areas in the current feature spec by asking up to 5 highly targeted clarification questions and encoding answers back into the spec.
----
-
 ## User Input
 
 ```text
@@ -173,4 +169,4 @@ Behavior rules:
  - If no questions asked due to full coverage, output a compact coverage summary (all categories Clear) then suggest advancing.
  - If quota reached with unresolved high-impact categories remaining, explicitly flag them under Deferred with rationale.
 
-Context for prioritization: $ARGUMENTS
+Context for prioritization: {ARGS}
\ No newline at end of file
diff --git a/.github/prompts/speckit.constitution.prompt.md b/.github/prompts/speckit.constitution.prompt.md
index 7f5684c..91aa678 100644
--- a/.github/prompts/speckit.constitution.prompt.md
+++ b/.github/prompts/speckit.constitution.prompt.md
@@ -1,7 +1,3 @@
----
-description: Create or update the project constitution from interactive or provided principle inputs, ensuring all dependent templates stay in sync.
----
-
 ## User Input
 
 ```text
@@ -74,4 +70,4 @@ If the user supplies partial updates (e.g., only one principle revision), still
 
 If critical info missing (e.g., ratification date truly unknown), insert `TODO(<FIELD_NAME>): explanation` and include in the Sync Impact Report under deferred items.
 
-Do not create a new template; always operate on the existing `.specify/memory/constitution.md` file.
+Do not create a new template; always operate on the existing `.specify/memory/constitution.md` file.
\ No newline at end of file
diff --git a/.github/prompts/speckit.implement.prompt.md b/.github/prompts/speckit.implement.prompt.md
index 3d51e80..c4e9ead 100644
--- a/.github/prompts/speckit.implement.prompt.md
+++ b/.github/prompts/speckit.implement.prompt.md
@@ -1,7 +1,3 @@
----
-description: Execute the implementation plan by processing and executing all tasks defined in tasks.md
----
-
 ## User Input
 
 ```text
@@ -119,4 +115,4 @@ You **MUST** consider the user input before proceeding (if not empty).
    - Confirm the implementation follows the technical plan
    - Report final status with summary of completed work
 
-Note: This command assumes a complete task breakdown exists in tasks.md. If tasks are incomplete or missing, suggest running `/tasks` first to regenerate the task list.
+Note: This command assumes a complete task breakdown exists in tasks.md. If tasks are incomplete or missing, suggest running `/tasks` first to regenerate the task list.
\ No newline at end of file
diff --git a/.github/prompts/speckit.plan.prompt.md b/.github/prompts/speckit.plan.prompt.md
index 16b7545..1ec85ad 100644
--- a/.github/prompts/speckit.plan.prompt.md
+++ b/.github/prompts/speckit.plan.prompt.md
@@ -1,7 +1,3 @@
----
-description: Execute the implementation planning workflow using the plan template to generate design artifacts.
----
-
 ## User Input
 
 ```text
@@ -66,7 +62,7 @@ You **MUST** consider the user input before proceeding (if not empty).
    - Output OpenAPI/GraphQL schema to `/contracts/`
 
 3. **Agent context update**:
-   - Run `.specify/scripts/bash/update-agent-context.sh copilot`
+   - Run `{AGENT_SCRIPT}`
    - These scripts detect which AI agent is in use
    - Update the appropriate agent-specific context file
    - Add only new technology from current plan
@@ -77,4 +73,4 @@ You **MUST** consider the user input before proceeding (if not empty).
 ## Key rules
 
 - Use absolute paths
-- ERROR on gate failures or unresolved clarifications
+- ERROR on gate failures or unresolved clarifications
\ No newline at end of file
diff --git a/.github/prompts/speckit.specify.prompt.md b/.github/prompts/speckit.specify.prompt.md
index 87afc10..46338e1 100644
--- a/.github/prompts/speckit.specify.prompt.md
+++ b/.github/prompts/speckit.specify.prompt.md
@@ -1,7 +1,3 @@
----
-description: Create or update the feature specification from a natural language feature description.
----
-
 ## User Input
 
 ```text
@@ -12,7 +8,7 @@ You **MUST** consider the user input before proceeding (if not empty).
 
 ## Outline
 
-The text the user typed after `/speckit.specify` in the triggering message **is** the feature description. Assume you always have it available in this conversation even if `$ARGUMENTS` appears literally below. Do not ask the user to repeat it unless they provided an empty command.
+The text the user typed after `/speckit.specify` in the triggering message **is** the feature description. Assume you always have it available in this conversation even if `{ARGS}` appears literally below. Do not ask the user to repeat it unless they provided an empty command.
 
 Given that feature description, do this:
 
@@ -205,4 +201,4 @@ Success criteria must be:
 - "API response time is under 200ms" (too technical, use "Users see results instantly")
 - "Database can handle 1000 TPS" (implementation detail, use user-facing metric)
 - "React components render efficiently" (framework-specific)
-- "Redis cache hit rate above 80%" (technology-specific)
+- "Redis cache hit rate above 80%" (technology-specific)
\ No newline at end of file
diff --git a/.github/prompts/speckit.tasks.prompt.md b/.github/prompts/speckit.tasks.prompt.md
index 41a7e04..54c25aa 100644
--- a/.github/prompts/speckit.tasks.prompt.md
+++ b/.github/prompts/speckit.tasks.prompt.md
@@ -1,7 +1,3 @@
----
-description: Generate an actionable, dependency-ordered tasks.md for the feature based on available design artifacts.
----
-
 ## User Input
 
 ```text
@@ -67,7 +63,7 @@ You **MUST** consider the user input before proceeding (if not empty).
    - Independent test criteria for each story
    - Suggested MVP scope (typically just User Story 1)
 
-Context for task generation: $ARGUMENTS
+Context for task generation: {ARGS}
 
 The tasks.md should be immediately executable - each task must be specific enough that an LLM can complete it without additional context.
 
@@ -108,4 +104,4 @@ The tasks.md should be immediately executable - each task must be specific enoug
    - Phase 3+: User Stories in priority order (P1, P2, P3...)
      - Within each story: Tests (if requested) → Models → Services → Endpoints → Integration
    - Final Phase: Polish & Cross-Cutting Concerns
-   - Each user story phase should be a complete, independently testable increment
+   - Each user story phase should be a complete, independently testable increment
\ No newline at end of file
diff --git a/.specify/scripts/bash/check-prerequisites.sh b/.specify/scripts/bash/check-prerequisites.sh
index 354f3f1..548e58a 100755
--- a/.specify/scripts/bash/check-prerequisites.sh
+++ b/.specify/scripts/bash/check-prerequisites.sh
@@ -78,6 +78,9 @@ done
 SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
 source "$SCRIPT_DIR/common.sh"
 
+# Ensure UTF-8 locale for better Unicode handling across tools
+ensure_utf8_locale || true
+
 # Get feature paths and validate branch
 eval $(get_feature_paths)
 check_feature_branch "$CURRENT_BRANCH" "$HAS_GIT" || exit 1
diff --git a/.specify/scripts/bash/common.sh b/.specify/scripts/bash/common.sh
index 314d10e..84bc24c 100755
--- a/.specify/scripts/bash/common.sh
+++ b/.specify/scripts/bash/common.sh
@@ -1,6 +1,69 @@
 #!/usr/bin/env bash
 # Common functions and variables for all scripts
 
+# Ensure the script runs in a UTF-8 locale to better support Unicode processing
+ensure_utf8_locale() {
+    # If current locale isn't UTF-8, try to switch to a UTF-8-capable one
+    if ! locale 2>/dev/null | grep -qi 'utf-8'; then
+        if locale -a 2>/dev/null | grep -qi '^C\.utf8\|^C\.UTF-8$'; then
+            export LC_ALL=C.UTF-8
+            export LANG=C.UTF-8
+        elif locale -a 2>/dev/null | grep -qi '^en_US\.utf8\|^en_US\.UTF-8$'; then
+            export LC_ALL=en_US.UTF-8
+            export LANG=en_US.UTF-8
+        fi
+    fi
+}
+
+# Unicode-aware slugify: keep letters and digits from all languages, replace others with '-'
+# Usage: slugify_unicode "Some 标题 示例"  -> some-标题-示例
+slugify_unicode() {
+    # Prefer Python 3 for robust Unicode handling; fall back to Perl; then to basic sed
+    if command -v python3 >/dev/null 2>&1; then
+        python3 - "$@" <<'PY'
+import sys
+def slugify(s: str) -> str:
+    s = s.strip()
+    out = []
+    prev_hyphen = False
+    for ch in s:
+        if ch.isalnum():
+            out.append(ch.lower())
+            prev_hyphen = False
+        else:
+            if not prev_hyphen:
+                out.append('-')
+                prev_hyphen = True
+    result = ''.join(out).strip('-')
+    return result or 'feature'
+
+if __name__ == '__main__':
+    if len(sys.argv) > 1:
+        text = ' '.join(sys.argv[1:])
+    else:
+        text = sys.stdin.read()
+    print(slugify(text))
+PY
+        return $?
+    elif command -v perl >/dev/null 2>&1; then
+        # Perl with Unicode properties
+        perl -CSD -Mutf8 -e '
+            binmode STDIN,  ":utf8"; binmode STDOUT, ":utf8"; 
+            local $/; 
+            my $s = @ARGV ? join(" ", @ARGV) : <STDIN>; 
+            $s =~ s/[^\p{L}\p{N}]+/-/g; 
+            $s =~ s/^-+|-+$//g; 
+            $s = length($s) ? lc($s) : "feature"; 
+            print $s; 
+        ' -- "$@"
+        return $?
+    else
+        # Fallback (ASCII only)
+        echo "$*" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g; s/-\+/-/g; s/^-//; s/-$//' | sed 's/^$/feature/'
+        return $?
+    fi
+}
+
 # Get repository root, with fallback for non-git repositories
 get_repo_root() {
     if git rev-parse --show-toplevel >/dev/null 2>&1; then
diff --git a/.specify/scripts/bash/create-new-feature.sh b/.specify/scripts/bash/create-new-feature.sh
index 980d8dc..eb8fdb2 100755
--- a/.specify/scripts/bash/create-new-feature.sh
+++ b/.specify/scripts/bash/create-new-feature.sh
@@ -2,6 +2,15 @@
 
 set -e
 
+# Load common helpers for Unicode support and shared functions
+SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
+if [ -f "$SCRIPT_DIR/common.sh" ]; then
+    # shellcheck source=/dev/null
+    source "$SCRIPT_DIR/common.sh"
+    # Ensure UTF-8 locale for better Unicode handling
+    ensure_utf8_locale || true
+fi
+
 JSON_MODE=false
 ARGS=()
 for arg in "$@"; do
@@ -67,8 +76,15 @@ fi
 NEXT=$((HIGHEST + 1))
 FEATURE_NUM=$(printf "%03d" "$NEXT")
 
-BRANCH_NAME=$(echo "$FEATURE_DESCRIPTION" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/-\+/-/g' | sed 's/^-//' | sed 's/-$//')
-WORDS=$(echo "$BRANCH_NAME" | tr '-' '\n' | grep -v '^$' | head -3 | tr '\n' '-' | sed 's/-$//')
+# Create a Unicode-aware slug from feature description
+if command -v slugify_unicode >/dev/null 2>&1; then
+    SLUG=$(slugify_unicode "$FEATURE_DESCRIPTION")
+else
+    # Fallback if common.sh wasn't sourced for some reason
+    SLUG=$(echo "$FEATURE_DESCRIPTION" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g; s/-\+/-/g; s/^-//; s/-$//' | sed 's/^$/feature/')
+fi
+# Keep only the first three segments to keep branch names short
+WORDS=$(echo "$SLUG" | tr '-' '\n' | grep -v '^$' | head -3 | tr '\n' '-' | sed 's/-$//')
 BRANCH_NAME="${FEATURE_NUM}-${WORDS}"
 
 if [ "$HAS_GIT" = true ]; then
diff --git a/.specify/scripts/bash/setup-plan.sh b/.specify/scripts/bash/setup-plan.sh
index 654ba50..9c1f807 100755
--- a/.specify/scripts/bash/setup-plan.sh
+++ b/.specify/scripts/bash/setup-plan.sh
@@ -27,6 +27,9 @@ done
 SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
 source "$SCRIPT_DIR/common.sh"
 
+# Ensure UTF-8 locale for better Unicode handling
+ensure_utf8_locale || true
+
 # Get all paths and variables from common functions
 eval $(get_feature_paths)
 
diff --git a/.specify/scripts/bash/update-agent-context.sh b/.specify/scripts/bash/update-agent-context.sh
index 1610c74..532e2cb 100755
--- a/.specify/scripts/bash/update-agent-context.sh
+++ b/.specify/scripts/bash/update-agent-context.sh
@@ -35,7 +35,7 @@
 #    - Creates default Claude file if no agent files exist
 #
 # Usage: ./update-agent-context.sh [agent_type]
-# Agent types: claude|gemini|copilot|cursor-agent|qwen|opencode|codex|windsurf|kilocode|auggie|q
+# Agent types: claude|gemini|copilot|cursor|qwen|opencode|codex|windsurf|kilocode|auggie|q
 # Leave empty to update all existing agent files
 
 set -e
@@ -52,6 +52,9 @@ set -o pipefail
 SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
 source "$SCRIPT_DIR/common.sh"
 
+# Ensure UTF-8 locale for better Unicode parsing and output
+ensure_utf8_locale || true
+
 # Get all paths and variables from common functions
 eval $(get_feature_paths)
 
@@ -482,6 +485,17 @@ update_agent_file() {
     
     log_info "Updating $agent_name context file: $target_file"
     
+    # Check if target_file is a symbolic link and resolve it to the actual file
+    if [[ -L "$target_file" ]]; then
+        local resolved_file
+        resolved_file=$(readlink -f "$target_file") || {
+            log_error "Failed to resolve symbolic link: $target_file"
+            return 1
+        }
+        log_info "Resolved symbolic link $target_file to $resolved_file"
+        target_file="$resolved_file"
+    fi
+
     local project_name
     project_name=$(basename "$REPO_ROOT")
     local current_date
@@ -558,7 +572,7 @@ update_specific_agent() {
         copilot)
             update_agent_file "$COPILOT_FILE" "GitHub Copilot"
             ;;
-        cursor-agent)
+        cursor)
             update_agent_file "$CURSOR_FILE" "Cursor IDE"
             ;;
         qwen)
@@ -590,7 +604,7 @@ update_specific_agent() {
             ;;
         *)
             log_error "Unknown agent type '$agent_type'"
-            log_error "Expected: claude|gemini|copilot|cursor-agent|qwen|opencode|codex|windsurf|kilocode|auggie|roo|q"
+            log_error "Expected: claude|gemini|copilot|cursor|qwen|opencode|codex|windsurf|kilocode|auggie|roo|q"
             exit 1
             ;;
     esac
@@ -684,7 +698,7 @@ print_summary() {
     
     echo
 
-    log_info "Usage: $0 [claude|gemini|copilot|cursor-agent|qwen|opencode|codex|windsurf|kilocode|auggie|codebuddy|q]"
+    log_info "Usage: $0 [claude|gemini|copilot|cursor|qwen|opencode|codex|windsurf|kilocode|auggie|codebuddy|q]"
 }
 
 #==============================================================================
